name: MythX Models

on: [push, pull_request]

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9, 3.10, 3.11, 3.12, pypy3.8, pypy3.9, pypy3.10]

        steps:
            - uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python-version }}
              id: setup-python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
            - name: Load cached venv
              id: cached-venv
              uses: actions/cache@v4
              with:
                  path: .venv
                  key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            - name: Install dependencies
              if: steps.cached-venv.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root
            - name: Install library
              run: poetry install --no-interaction
            - name: Test with pytest
              run: make test

    deploy:
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              id: setup-python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
            - name: Load cached venv
              id: cached-venv
              uses: actions/cache@v4
              with:
                  path: .venv
                  key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            - name: Install dependencies
              if: steps.cached-venv.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root
            - name: Install library
              run: poetry install --no-interaction
            - name: Build and publish
              env:
                  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
                  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
              run: make release
